NAME
    Bit::Set - Perl interface for the high-performance 'bit' C library

VERSION
    version 0.01

SYNOPSIS
      use Bit::Set;

      # Create a new bitset of 1024 bits
      my $set = Bit::Set::Bit_new(1024);

      # Set some bits
      Bit::Set::Bit_bset($set, 1);
      Bit::Set::Bit_bset($set, 2);
      Bit::Set::Bit_bset($set, 5);

      # Get the population count
      my $count = Bit::Set::Bit_count($set);
      print "Population count: $count\n"; # Should be 3

      # Free the bitset
      Bit::Set::Bit_free(\$set);

DESCRIPTION
    This module provides a procedural Perl interface to the C library
    "bit.h", for creating and manipulating bitsets. It uses "FFI::Platypus"
    to wrap the C functions and "Alien::Bit" to locate and link to the C
    library.

    The API is a direct mapping of the C functions. For detailed semantics
    of each function, please refer to the "bit.h" header file documentation.

    Runtime checks on arguments are performed if the "DEBUG" environment
    variable is set to a true value.

FUNCTIONS
  Creation and Destruction
    Bit_new(length)
        Creates a new bitset of "length" bits.

    Bit_free(set_ref)
        Frees the memory associated with the bitset. Expects a reference to
        the scalar holding the bitset object.

    Bit_load(length, buffer)
        Loads a bitset of "length" from an external "buffer".

    Bit_extract(set, buffer)
        Extracts a bitset from "set" into an external "buffer".

  Properties
    Bit_buffer_size(length)
        Returns the size in bytes required to store a bitset of "length".

    Bit_length(set)
        Returns the length (capacity) of the bitset in bits.

    Bit_count(set)
        Returns the number of set bits (population count) in the bitset.

  Bit Manipulation
    Bit_aset(set, indices, n)
        Sets an array of "n" bits in the bitset from "indices".

    Bit_bset(set, index)
        Sets a single bit at "index" in the bitset.

    Bit_aclear(set, indices, n)
        Clears an array of "n" bits in the bitset from "indices".

    Bit_bclear(set, index)
        Clears a single bit at "index" in the bitset.

    Bit_clear(set, lo, hi)
        Clears a range of bits in the bitset from "lo" to "hi" (inclusive).

    Bit_get(set, index)
        Gets the value of a bit at a given "index".

    Bit_not(set, lo, hi)
        Inverts a range of bits in the bitset from "lo" to "hi" (inclusive).

    Bit_put(set, n, val)
        Sets the "n"-th bit to "val".

    Bit_set(set, lo, hi)
        Sets a range of bits in the bitset from "lo" to "hi" (inclusive).

  Comparison
    Bit_eq(s, t)
        Checks if two bitsets "s" and "t" are equal.

    Bit_leq(s, t)
        Checks if bitset "s" is a subset of or equal to bitset "t".

    Bit_lt(s, t)
        Checks if bitset "s" is a proper subset of bitset "t".

  Set Operations
    Bit_diff(s, t)
        Returns a new bitset that is the symmetric difference of "s" and
        "t".

    Bit_inter(s, t)
        Returns a new bitset that is the intersection of "s" and "t".

    Bit_minus(s, t)
        Returns a new bitset that is the difference of "s" and "t".

    Bit_union(s, t)
        Returns a new bitset that is the union of "s" and "t".

  Set Operation Counts
    Bit_diff_count(s, t)
        Returns the population count of the symmetric difference of "s" and
        "t".

    Bit_inter_count(s, t)
        Returns the population count of the intersection of "s" and "t".

    Bit_minus_count(s, t)
        Returns the population count of the difference of "s" and "t".

    Bit_union_count(s, t)
        Returns the population count of the union of "s" and "t".

AUTHOR
    GitHub Copilot, guided by a senior Perl engineer.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2025 by Christos Argyropoulos.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.


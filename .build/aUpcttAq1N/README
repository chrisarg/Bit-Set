NAME
    Bit::Set - Perl interface for bitset functions from the 'bit' C library

VERSION
    version 0.01

SYNOPSIS
      use Bit::Set;

      # Create a new bitset
      my $set = Bit_new(1024);

      # Set some bits
      Bit_bset($set, 0);
      Bit_bset($set, 42);

      # Get population count
      my $count = Bit_count($set);

      # Free the bitset
      Bit_free(\$set);

DESCRIPTION
    This module provides a procedural Perl interface to the C library
    'bit.h', for creating and manipulating bitsets. It uses "FFI::Platypus"
    to wrap the C functions and "Alien::Bit" to locate and link to the C
    library.

    The API is a direct mapping of the C functions. For detailed semantics
    of each function, please refer to the "bit.h" header file documentation.

    Runtime checks on arguments are performed if the "DEBUG" environment
    variable is set to a true value.

FUNCTIONS
  Creation and Destruction
    Bit_new(length)
        Creates a new bitset with the specified capacity in bits.

    Bit_free(set_ref)
        Frees the memory associated with the bitset. Expects a reference to
        the scalar holding the bitset.

    Bit_load(length, buffer)
        Loads an externally allocated bitset into a new Bit_T structure.

    Bit_extract(set, buffer)
        Extracts the bitset from a Bit_T into an externally allocated
        buffer.

  Properties
    Bit_buffer_size(length)
        Returns the number of bytes needed to store a bitset of given
        length.

    Bit_length(set)
        Returns the length (capacity) of the bitset in bits.

    Bit_count(set)
        Returns the population count (number of set bits) of the bitset.

  Manipulation
    Bit_aset(set, indices, n)
        Sets an array of bits specified by indices.

    Bit_bset(set, index)
        Sets a single bit at the specified index to 1.

    Bit_aclear(set, indices, n)
        Clears an array of bits specified by indices.

    Bit_bclear(set, index)
        Clears a single bit at the specified index to 0.

    Bit_clear(set, lo, hi)
        Clears a range of bits from lo to hi (inclusive).

    Bit_get(set, index)
        Returns the value of the bit at the specified index.

    Bit_not(set, lo, hi)
        Inverts a range of bits from lo to hi (inclusive).

    Bit_put(set, n, val)
        Sets the nth bit to val and returns the previous value.

    Bit_set(set, lo, hi)
        Sets a range of bits from lo to hi (inclusive) to 1.

  Comparisons
    Bit_eq(s, t)
        Returns 1 if bitsets s and t are equal, 0 otherwise.

    Bit_leq(s, t)
        Returns 1 if bitset s is a subset of or equal to t, 0 otherwise.

    Bit_lt(s, t)
        Returns 1 if bitset s is a proper subset of t, 0 otherwise.

  Set Operations
    Bit_diff(s, t)
        Returns a new bitset containing the difference of s and t.

    Bit_inter(s, t)
        Returns a new bitset containing the intersection of s and t.

    Bit_minus(s, t)
        Returns a new bitset containing the symmetric difference of s and t.

    Bit_union(s, t)
        Returns a new bitset containing the union of s and t.

  Set Operation Counts
    Bit_diff_count(s, t)
        Returns the population count of the difference of s and t without
        creating a new bitset.

    Bit_inter_count(s, t)
        Returns the population count of the intersection of s and t without
        creating a new bitset.

    Bit_minus_count(s, t)
        Returns the population count of the symmetric difference of s and t
        without creating a new bitset.

    Bit_union_count(s, t)
        Returns the population count of the union of s and t without
        creating a new bitset.

AUTHOR
    GitHub Copilot, guided by a senior Perl engineer.

COPYRIGHT AND LICENSE
    This software is copyright (c) 2025 by Christos Argyropoulos.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.


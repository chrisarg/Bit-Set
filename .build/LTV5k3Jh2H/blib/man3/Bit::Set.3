.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man v6.0.2 (Pod::Simple 3.47)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Required to disable full justification in groff 1.23.0.
.if n .ds AD l
.\" ========================================================================
.\"
.IX Title "Bit::Set 3"
.TH Bit::Set 3 2025-08-30 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Bit::Set \- Perl interface for bitset functions from the \*(Aqbit\*(Aq C library
.SH VERSION
.IX Header "VERSION"
version 0.01
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bit::Set;
\&
\&  # Create a new bitset
\&  my $set = Bit_new(1024);
\&
\&  # Set some bits
\&  Bit_bset($set, 0);
\&  Bit_bset($set, 42);
\&
\&  # Get population count
\&  my $count = Bit_count($set);
\&
\&  # Free the bitset
\&  Bit_free(\e$set);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module provides a procedural Perl interface to the C library \*(Aqbit.h\*(Aq,
for creating and manipulating bitsets. It uses \f(CW\*(C`FFI::Platypus\*(C'\fR to wrap the
C functions and \f(CW\*(C`Alien::Bit\*(C'\fR to locate and link to the C library.
.PP
The API is a direct mapping of the C functions. For detailed semantics of each
function, please refer to the \f(CW\*(C`bit.h\*(C'\fR header file documentation.
.PP
Runtime checks on arguments are performed if the \f(CW\*(C`DEBUG\*(C'\fR environment variable
is set to a true value.
.SH FUNCTIONS
.IX Header "FUNCTIONS"
.SS "Creation and Destruction"
.IX Subsection "Creation and Destruction"
.IP \fBBit_new(length)\fR 4
.IX Item "Bit_new(length)"
Creates a new bitset with the specified capacity in bits.
.IP \fBBit_free(set_ref)\fR 4
.IX Item "Bit_free(set_ref)"
Frees the memory associated with the bitset. Expects a reference to the scalar holding the bitset.
.IP "\fBBit_load(length, buffer)\fR" 4
.IX Item "Bit_load(length, buffer)"
Loads an externally allocated bitset into a new Bit_T structure.
.IP "\fBBit_extract(set, buffer)\fR" 4
.IX Item "Bit_extract(set, buffer)"
Extracts the bitset from a Bit_T into an externally allocated buffer.
.SS Properties
.IX Subsection "Properties"
.IP \fBBit_buffer_size(length)\fR 4
.IX Item "Bit_buffer_size(length)"
Returns the number of bytes needed to store a bitset of given length.
.IP \fBBit_length(set)\fR 4
.IX Item "Bit_length(set)"
Returns the length (capacity) of the bitset in bits.
.IP \fBBit_count(set)\fR 4
.IX Item "Bit_count(set)"
Returns the population count (number of set bits) of the bitset.
.SS Manipulation
.IX Subsection "Manipulation"
.IP "\fBBit_aset(set, indices, n)\fR" 4
.IX Item "Bit_aset(set, indices, n)"
Sets an array of bits specified by indices.
.IP "\fBBit_bset(set, index)\fR" 4
.IX Item "Bit_bset(set, index)"
Sets a single bit at the specified index to 1.
.IP "\fBBit_aclear(set, indices, n)\fR" 4
.IX Item "Bit_aclear(set, indices, n)"
Clears an array of bits specified by indices.
.IP "\fBBit_bclear(set, index)\fR" 4
.IX Item "Bit_bclear(set, index)"
Clears a single bit at the specified index to 0.
.IP "\fBBit_clear(set, lo, hi)\fR" 4
.IX Item "Bit_clear(set, lo, hi)"
Clears a range of bits from lo to hi (inclusive).
.IP "\fBBit_get(set, index)\fR" 4
.IX Item "Bit_get(set, index)"
Returns the value of the bit at the specified index.
.IP "\fBBit_not(set, lo, hi)\fR" 4
.IX Item "Bit_not(set, lo, hi)"
Inverts a range of bits from lo to hi (inclusive).
.IP "\fBBit_put(set, n, val)\fR" 4
.IX Item "Bit_put(set, n, val)"
Sets the nth bit to val and returns the previous value.
.IP "\fBBit_set(set, lo, hi)\fR" 4
.IX Item "Bit_set(set, lo, hi)"
Sets a range of bits from lo to hi (inclusive) to 1.
.SS Comparisons
.IX Subsection "Comparisons"
.IP "\fBBit_eq(s, t)\fR" 4
.IX Item "Bit_eq(s, t)"
Returns 1 if bitsets s and t are equal, 0 otherwise.
.IP "\fBBit_leq(s, t)\fR" 4
.IX Item "Bit_leq(s, t)"
Returns 1 if bitset s is a subset of or equal to t, 0 otherwise.
.IP "\fBBit_lt(s, t)\fR" 4
.IX Item "Bit_lt(s, t)"
Returns 1 if bitset s is a proper subset of t, 0 otherwise.
.SS "Set Operations"
.IX Subsection "Set Operations"
.IP "\fBBit_diff(s, t)\fR" 4
.IX Item "Bit_diff(s, t)"
Returns a new bitset containing the difference of s and t.
.IP "\fBBit_inter(s, t)\fR" 4
.IX Item "Bit_inter(s, t)"
Returns a new bitset containing the intersection of s and t.
.IP "\fBBit_minus(s, t)\fR" 4
.IX Item "Bit_minus(s, t)"
Returns a new bitset containing the symmetric difference of s and t.
.IP "\fBBit_union(s, t)\fR" 4
.IX Item "Bit_union(s, t)"
Returns a new bitset containing the union of s and t.
.SS "Set Operation Counts"
.IX Subsection "Set Operation Counts"
.IP "\fBBit_diff_count(s, t)\fR" 4
.IX Item "Bit_diff_count(s, t)"
Returns the population count of the difference of s and t without creating a new bitset.
.IP "\fBBit_inter_count(s, t)\fR" 4
.IX Item "Bit_inter_count(s, t)"
Returns the population count of the intersection of s and t without creating a new bitset.
.IP "\fBBit_minus_count(s, t)\fR" 4
.IX Item "Bit_minus_count(s, t)"
Returns the population count of the symmetric difference of s and t without creating a new bitset.
.IP "\fBBit_union_count(s, t)\fR" 4
.IX Item "Bit_union_count(s, t)"
Returns the population count of the union of s and t without creating a new bitset.
.SH AUTHOR
.IX Header "AUTHOR"
GitHub Copilot, guided by a senior Perl engineer.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2025 by Christos Argyropoulos.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

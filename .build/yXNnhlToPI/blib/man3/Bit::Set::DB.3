.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man v6.0.2 (Pod::Simple 3.47)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Required to disable full justification in groff 1.23.0.
.if n .ds AD l
.\" ========================================================================
.\"
.IX Title "Bit::Set::DB 3"
.TH Bit::Set::DB 3 2025-08-30 "perl v5.38.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Bit::Set::DB \- Perl interface for bitset containers from the \*(Aqbit\*(Aq C library
.SH VERSION
.IX Header "VERSION"
version 0.01
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&  use Bit::Set::DB;
\&  use Bit::Set;
\&
\&  # Create a new bitset database
\&  my $db = BitDB_new(1024, 10);
\&
\&  # Create a bitset and add it to the database
\&  my $set = Bit::Set::Bit_new(1024);
\&  Bit::Set::Bit_bset($set, 42);
\&  BitDB_put_at($db, 0, $set);
\&
\&  # Get population count at index
\&  my $count = BitDB_count_at($db, 0);
\&
\&  # Free the database and bitset
\&  BitDB_free(\e$db);
\&  Bit::Set::Bit_free(\e$set);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module provides a procedural Perl interface to the C library \*(Aqbit.h\*(Aq,
for creating and manipulating containers of bitsets (BitDB). It uses
\&\f(CW\*(C`FFI::Platypus\*(C'\fR to wrap the C functions and \f(CW\*(C`Alien::Bit\*(C'\fR to locate and link
to the C library.
.PP
The API is a direct mapping of the C functions. For detailed semantics of each
function, please refer to the \f(CW\*(C`bit.h\*(C'\fR header file documentation.
.PP
Runtime checks on arguments are performed if the \f(CW\*(C`DEBUG\*(C'\fR environment variable
is set to a true value.
.SH FUNCTIONS
.IX Header "FUNCTIONS"
.SS "Creation and Destruction"
.IX Subsection "Creation and Destruction"
.IP "\fBBitDB_new(length, num_of_bitsets)\fR" 4
.IX Item "BitDB_new(length, num_of_bitsets)"
Creates a new bitset container for \f(CW\*(C`num_of_bitsets\*(C'\fR bitsets, each of \f(CW\*(C`length\*(C'\fR.
.IP \fBBitDB_free(db_ref)\fR 4
.IX Item "BitDB_free(db_ref)"
Frees the memory associated with the bitset container. Expects a reference to the scalar holding the DB object.
.SS Properties
.IX Subsection "Properties"
.IP \fBBitDB_length(set)\fR 4
.IX Item "BitDB_length(set)"
Returns the length of bitsets in the container.
.IP \fBBitDB_nelem(set)\fR 4
.IX Item "BitDB_nelem(set)"
Returns the number of bitsets in the container.
.IP "\fBBitDB_count_at(set, index)\fR" 4
.IX Item "BitDB_count_at(set, index)"
Returns the population count of the bitset at the given \f(CW\*(C`index\*(C'\fR.
.IP \fBBitDB_count(set)\fR 4
.IX Item "BitDB_count(set)"
Returns a pointer to an array of population counts for all bitsets in the container.
.SS Manipulation
.IX Subsection "Manipulation"
.IP "\fBBitDB_get_from(set, index)\fR" 4
.IX Item "BitDB_get_from(set, index)"
Returns a bitset from the container at the given \f(CW\*(C`index\*(C'\fR.
.IP "\fBBitDB_put_at(set, index, bitset)\fR" 4
.IX Item "BitDB_put_at(set, index, bitset)"
Puts a \f(CW\*(C`bitset\*(C'\fR into the container at the given \f(CW\*(C`index\*(C'\fR.
.IP "\fBBitDB_extract_from(set, index, buffer)\fR" 4
.IX Item "BitDB_extract_from(set, index, buffer)"
Extracts a bitset from the container at \f(CW\*(C`index\*(C'\fR into a \f(CW\*(C`buffer\*(C'\fR.
.IP "\fBBitDB_replace_at(set, index, buffer)\fR" 4
.IX Item "BitDB_replace_at(set, index, buffer)"
Replaces a bitset in the container at \f(CW\*(C`index\*(C'\fR with the contents of a \f(CW\*(C`buffer\*(C'\fR.
.IP \fBBitDB_clear(set)\fR 4
.IX Item "BitDB_clear(set)"
Clears all bitsets in the container.
.IP "\fBBitDB_clear_at(set, index)\fR" 4
.IX Item "BitDB_clear_at(set, index)"
Clears the bitset at a given \f(CW\*(C`index\*(C'\fR in the container.
.SS "Set Operation Counts"
.IX Subsection "Set Operation Counts"
These functions perform set operations between two bitset containers. The \f(CW\*(C`opts\*(C'\fR
parameter is an object of type \f(CW\*(C`Bit::Set::DB::SETOP_COUNT_OPTS\*(C'\fR.
.PP
Example for \f(CW\*(C`opts\*(C'\fR:
.PP
.Vb 5
\&  my $opts = Bit::Set::DB::SETOP_COUNT_OPTS\->new(
\&      num_cpu_threads => 4,
\&      device_id       => 0,
\&      # ... other flags
\&  );
.Ve
.IP "\fBBitDB_inter_count_cpu(db1, db2, opts)\fR =item \fBBitDB_union_count_cpu(db1, db2, opts)\fR =item \fBBitDB_diff_count_cpu(db1, db2, opts)\fR =item \fBBitDB_minus_count_cpu(db1, db2, opts)\fR" 4
.IX Item "BitDB_inter_count_cpu(db1, db2, opts) =item BitDB_union_count_cpu(db1, db2, opts) =item BitDB_diff_count_cpu(db1, db2, opts) =item BitDB_minus_count_cpu(db1, db2, opts)"
Perform the respective set operation count on the CPU.
.IP "\fBBitDB_inter_count_gpu(db1, db2, opts)\fR =item \fBBitDB_union_count_gpu(db1, db2, opts)\fR =item \fBBitDB_diff_count_gpu(db1, db2, opts)\fR =item \fBBitDB_minus_count_gpu(db1, db2, opts)\fR" 4
.IX Item "BitDB_inter_count_gpu(db1, db2, opts) =item BitDB_union_count_gpu(db1, db2, opts) =item BitDB_diff_count_gpu(db1, db2, opts) =item BitDB_minus_count_gpu(db1, db2, opts)"
Perform the respective set operation count on the GPU.
.IP "\fBBitDB_inter_count_store_cpu(db1, db2, buffer, opts)\fR =item \fBBitDB_union_count_store_cpu(db1, db2, buffer, opts)\fR =item \fBBitDB_diff_count_store_cpu(db1, db2, buffer, opts)\fR =item \fBBitDB_minus_count_store_cpu(db1, db2, buffer, opts)\fR" 4
.IX Item "BitDB_inter_count_store_cpu(db1, db2, buffer, opts) =item BitDB_union_count_store_cpu(db1, db2, buffer, opts) =item BitDB_diff_count_store_cpu(db1, db2, buffer, opts) =item BitDB_minus_count_store_cpu(db1, db2, buffer, opts)"
Perform the respective set operation count on the CPU and store results in \f(CW\*(C`buffer\*(C'\fR.
.IP "\fBBitDB_inter_count_store_gpu(db1, db2, buffer, opts)\fR =item \fBBitDB_union_count_store_gpu(db1, db2, buffer, opts)\fR =item \fBBitDB_diff_count_store_gpu(db1, db2, buffer, opts)\fR =item \fBBitDB_minus_count_store_gpu(db1, db2, buffer, opts)\fR" 4
.IX Item "BitDB_inter_count_store_gpu(db1, db2, buffer, opts) =item BitDB_union_count_store_gpu(db1, db2, buffer, opts) =item BitDB_diff_count_store_gpu(db1, db2, buffer, opts) =item BitDB_minus_count_store_gpu(db1, db2, buffer, opts)"
Perform the respective set operation count on the GPU and store results in \f(CW\*(C`buffer\*(C'\fR.
.SH AUTHOR
.IX Header "AUTHOR"
GitHub Copilot, guided by a senior Perl engineer.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2025 by Christos Argyropoulos.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

NAME
    Bit::Set - A Perl interface to the bit.h C library for bitsets.

VERSION
    version 0.01

SYNOPSIS
      use Bit::Set;

      # Create a new bitset
      my $set = Bit::Set::Bit_new(1024);

      # Set some bits
      Bit::Set::Bit_bset($set, 1);
      Bit::Set::Bit_bset($set, 2);
      Bit::Set::Bit_bset($set, 5);

      # Get the population count
      my $count = Bit::Set::Bit_count($set);
      print "Population count: $count\n"; # 3

      # Free the bitset
      Bit::Set::Bit_free(\$set);

DESCRIPTION
    This module provides a procedural Perl interface to the C library
    "bit.h", for creating and manipulating bitsets. It uses "FFI::Platypus"
    to wrap the C functions and "Alien::Bit" to locate and link to the C
    library.

FUNCTIONS
  Bit_new(length)
    Creates a new bitset of the given length.

  Bit_free(set)
    Frees the memory associated with the bitset.

  Bit_load(length, buffer)
    Loads a bitset from an external buffer.

  Bit_extract(set, buffer)
    Extracts a bitset into an external buffer.

  Bit_buffer_size(length)
    Returns the size in bytes required to store a bitset of the given
    length.

  Bit_length(set)
    Returns the length (capacity) of the bitset in bits.

  Bit_count(set)
    Returns the number of set bits (population count) in the bitset.

  Bit_aset(set, indices, n)
    Sets an array of bits in the bitset.

  Bit_bset(set, index)
    Sets a single bit in the bitset.

  Bit_aclear(set, indices, n)
    Clears an array of bits in the bitset.

  Bit_bclear(set, index)
    Clears a single bit in the bitset.

  Bit_clear(set, lo, hi)
    Clears a range of bits in the bitset.

  Bit_get(set, index)
    Gets the value of a bit at a given index.

  Bit_not(set, lo, hi)
    Inverts a range of bits in the bitset.

  Bit_put(set, n, val)
    Sets the nth bit to the given value.

  Bit_set(set, lo, hi)
    Sets a range of bits in the bitset.

  Bit_eq(s, t)
    Checks if two bitsets are equal.

  Bit_leq(s, t)
    Checks if bitset "s" is a subset of or equal to bitset "t".

  Bit_lt(s, t)
    Checks if bitset "s" is a proper subset of bitset "t".

  Bit_diff(s, t)
    Returns a new bitset that is the difference of two bitsets.

  Bit_inter(s, t)
    Returns a new bitset that is the intersection of two bitsets.

  Bit_minus(s, t)
    Returns a new bitset that is the symmetric difference of two bitsets.

  Bit_union(s, t)
    Returns a new bitset that is the union of two bitsets.

  Bit_diff_count(s, t)
    Returns the population count of the difference of two bitsets.

  Bit_inter_count(s, t)
    Returns the population count of the intersection of two bitsets.

  Bit_minus_count(s, t)
    Returns the population count of the symmetric difference of two bitsets.

    =t_union_count(s, t)

    Returns the population count of the union of two bitsets.

AUTHOR
    GitHub Copilot

COPYRIGHT AND LICENSE
    This software is copyright (c) 2025 by Christos Argyropoulos.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

